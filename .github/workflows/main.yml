name: CI — Admin API smoke tests (strict)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    # ⚙️ Réglages faciles à adapter
    env:
      API_PORT: "3001"
      HEALTH_PATH: "/api/health"
      CSRF_PATH: "/api/csrf"

      # DB locale exposée par le service postgres
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/entreprise?schema=public

      # Secrets du dépôt requis (paramètres > Secrets and variables > Actions)
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}

      # ⚠️ Doit correspondre au hash ci-dessus
      ADMIN_PASSWORD_PLAIN: ReenweezAdmin2025!

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: entreprise
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Ensure jq is installed
        run: |
          if ! command -v jq >/dev/null; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Install dependencies (retry once)
        shell: bash
        run: |
          set -e
          npm config set fund false
          npm config set audit false
          npm ci || (sleep 5 && npm ci)

      - name: Prisma generate
        run: npx prisma generate

      - name: Prepare DB (migrate + push)
        shell: bash
        run: |
          set -e
          if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations)" ]; then
            npx prisma migrate deploy
          fi
          # Toujours s'assurer que le schéma est poussé
          npx prisma db push

      - name: Seed DB (tsx)
        run: npx tsx prisma/seed.ts

      - name: Start API (background)
        shell: bash
        run: |
          set -euo pipefail
          export PORT="${API_PORT}"
          # Choisis l’entrypoint serveur
          if   [ -f server/index.ts ]; then ENTRY="server/index.ts"
          elif [ -f server/app.ts   ]; then ENTRY="server/app.ts"
          elif [ -f server/main.ts  ]; then ENTRY="server/main.ts"
          else
            # Dernier recours: un script npm
            if npm run | grep -q '^  dev:server'; then
              npm run dev:server > api.log 2>&1 & echo $! > api.pid; exit 0
            fi
            npm run dev > api.log 2>&1 & echo $! > api.pid; exit 0
          fi
          npx tsx "$ENTRY" > api.log 2>&1 & echo $! > api.pid

      - name: Wait for API health
        shell: bash
        run: |
          set -e
          URL="http://localhost:${API_PORT}${HEALTH_PATH}"
          echo "Waiting for $URL ..."
          for i in {1..120}; do
            if curl -fsS "$URL" >/dev/null; then
              echo "API is healthy ✅"
              exit 0
            fi
            sleep 2
          done
          echo "API did not become healthy in time ❌"
          echo "===== API LOGS (tail) ====="
          tail -n 200 api.log || true
          exit 1

      - name: Get CSRF token
        shell: bash
        run: |
          set -e
          curl -fsS -c cookies.txt "http://localhost:${API_PORT}${CSRF_PATH}" -o csrf.json
          CSRF=$(jq -r '.csrfToken // empty' csrf.json)
          if [ -z "$CSRF" ]; then
            echo "No CSRF token in response ❌"
            cat csrf.json || true
            exit 1
          fi
          echo "CSRF=$CSRF" >> "$GITHUB_ENV"

      - name: Log in as admin
        shell: bash
        run: |
          set -e
          CODE=$(curl -sS -b cookies.txt -c cookies.txt \
            -H "Content-Type: application/json" \
            -H "X-CSRF-Token: $CSRF" \
            -o login.json -w "%{http_code}" \
            -X POST "http://localhost:${API_PORT}/api/auth/login" \
            -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD_PLAIN\"}")
          echo "Login HTTP code: $CODE"
          cat login.json || true
          test "$CODE" -ge 200 -a "$CODE" -lt 300

      - name: Dashboard summary 200
        shell: bash
        run: |
          set -e
          CODE=$(curl -sS -b cookies.txt \
            -o summary.json -w "%{http_code}" \
            "http://localhost:${API_PORT}/api/admin/dashboard/summary")
          echo "Dashboard HTTP code: $CODE"
          cat summary.json | jq . || true
          test "$CODE" -ge 200 -a "$CODE" -lt 300

      - name: Print API logs on failure
        if: failure()
        run: |
          echo "===== FULL API LOGS ====="
          cat api.log || true

      - name: Kill API (always)
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill "$(cat api.pid)" || true
          fi
