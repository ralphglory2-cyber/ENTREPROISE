name: CI — Admin API smoke tests

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: entreprise
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      # DB locale exposée par le service postgres
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/entreprise?schema=public'
      # Secrets du dépôt
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
      # Mot de passe en clair correspondant au hash ci-dessus
      ADMIN_PASSWORD_PLAIN: 'ReenweezAdmin2025!'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Ensure jq is installed
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Install dependencies (ci with fallback)
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Prisma generate
        run: npx prisma generate

      - name: Prepare DB (migrate or push)
        run: |
          npx prisma migrate deploy || npx prisma db push

      # Forcer l'usage de tsx pour éviter l'erreur ts-node/ESM
      - name: Seed DB (force tsx)
        run: npx tsx prisma/seed.ts

      - name: Start API (background) and wait for /api/health
        shell: bash
        run: |
          set -euo pipefail
          # Démarre l’API (ajuste le chemin si besoin)
          if [ -f server/index.ts ]; then
            npx tsx server/index.ts > api.log 2>&1 &
          elif [ -f server/app.ts ]; then
            npx tsx server/app.ts > api.log 2>&1 &
          else
            npm run dev:server > api.log 2>&1 &
          fi

          # Attente de l’API
          for i in {1..60}; do
            if curl -fsS http://localhost:3001/api/health >/dev/null; then
              echo "API is up"
              break
            fi
            sleep 2
          done
          curl -fsS http://localhost:3001/api/health

      - name: Get CSRF token
        run: |
          curl -fsS -c cookies.txt http://localhost:3001/api/csrf -o csrf.json
          echo "CSRF=$(jq -r '.csrfToken' csrf.json)" >> "$GITHUB_ENV"

      - name: Log in as admin
        run: |
          curl -fsS -b cookies.txt -c cookies.txt \
            -H "Content-Type: application/json" \
            -H "X-CSRF-Token: $CSRF" \
            -X POST http://localhost:3001/api/auth/login \
            -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD_PLAIN\"}" \
            -o login.json
          cat login.json

      - name: Dashboard summary should return 200
        run: |
          curl -fsS -b cookies.txt http://localhost:3001/api/admin/dashboard/summary -o summary.json
          cat summary.json | jq .

      - name: Print API logs on failure
        if: failure()
        run: |
          echo "===== API LOGS ====="
          cat api.log || true
