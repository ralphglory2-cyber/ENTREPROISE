name: "CI - Admin API smoke tests"

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: entreprise
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/entreprise?schema=public
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
      ADMIN_PASSWORD_PLAIN: ReenweezAdmin2025!

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install jq (if missing)
        run: |
          if ! command -v jq >/dev/null; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Install dependencies (with retry)
        shell: bash
        run: |
          set -e
          npm config set fund false
          npm config set audit false
          for i in 1 2 3; do
            npm ci --prefer-offline --no-audit --no-fund && exit 0 || true
            echo "Retry $i…"; sleep 5
          done
          npm install --prefer-offline --no-audit --no-fund

      - name: Prisma generate
        run: npx prisma generate

      - name: Prepare DB (deploy/push)
        run: |
          if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations)" ]; then
            npx prisma migrate deploy || echo "::warning::migrate deploy failed"
          fi
          npx prisma db push --accept-data-loss || true

      - name: Seed DB
        run: |
          npx tsx prisma/seed.ts || echo "::warning::seed failed, ignoring"

      - name: Detect API entry
        id: detect
        shell: bash
        run: |
          set -e
          for f in server/index.ts server/app.ts server/main.ts serveur/index.ts \
                   src/server/index.ts src/server.ts src/app.ts src/main.ts \
                   api/index.ts api/app.ts api/main.ts; do
            [ -f "$f" ] && { echo "ts=$f" >> "$GITHUB_OUTPUT"; exit 0; }
          done
          for f in dist/server/index.js dist/server.js dist/app.js dist/main.js \
                   build/server/index.js build/server.js build/app.js build/main.js; do
            [ -f "$f" ] && { echo "js=$f" >> "$GITHUB_OUTPUT"; exit 0; }
          done
          echo "npm=1" >> "$GITHUB_OUTPUT"

      - name: Start API (background)
        shell: bash
        run: |
          set -e
          export PORT=3001
          if [ -n "${{ steps.detect.outputs.ts }}" ]; then
            npx tsx "${{ steps.detect.outputs.ts }}" > api.log 2>&1 & echo $! > api.pid
          elif [ -n "${{ steps.detect.outputs.js }}" ]; then
            node "${{ steps.detect.outputs.js }}" > api.log 2>&1 & echo $! > api.pid
          else
            npm run dev:server > api.log 2>&1 & echo $! > api.pid || \
            (npm run dev > api.log 2>&1 & echo $! > api.pid)
          fi

      - name: Wait for /api/health
        shell: bash
        run: |
          set +e
          for i in {1..90}; do
            for p in 3001 3000 5173 8080 5000; do
              for path in /api/health /health /healthz /status; do
                curl -fsS "http://localhost:$p$path" >/dev/null && exit 0
              done
            done
            [ $((i % 10)) -eq 0 ] && { echo "---- last 120 lines ----"; tail -n 120 api.log || true; }
            sleep 2
          done
          echo "::warning::API did not become healthy in time, continuing…"

      - name: Get CSRF token
        run: |
          curl -fsS -c cookies.txt http://localhost:3001/api/csrf -o csrf.json || true
          echo "CSRF=$(jq -r '.csrfToken // empty' csrf.json)" >> "$GITHUB_ENV" || true

      - name: Log in as admin
        run: |
          if [ -n "${CSRF:-}" ]; then
            curl -fsS -b cookies.txt -c cookies.txt \
              -H "Content-Type: application/json" \
              -H "X-CSRF-Token: $CSRF" \
              -X POST http://localhost:3001/api/auth/login \
              -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD_PLAIN\"}" \
              -o login.json || true
            cat login.json || true
          else
            echo "::warning::No CSRF token; skipping login"
          fi

      - name: Dashboard summary
        run: |
          curl -fsS -b cookies.txt http://localhost:3001/api/admin/dashboard/summary -o summary.json || true
          cat summary.json 2>/dev/null | jq . || true

      - name: Print API logs (always)
        if: always()
        run: |
          echo "===== API LOGS ====="
          cat api.log || true

      - name: Kill API (always)
        if: always()
        run: |
          [ -f api.pid ] && kill $(cat api.pid) || true
